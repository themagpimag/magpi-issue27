Materials required
Raspberry Pi
Raspbian Wheezy
QR Encoder program
Minecraft Pi

Getting started

I'm going to start by assuming you have a Raspberry Pi running Raspbian and can logon as user pi and start the desktop (or have the desktop already running). So we'll get going by installing Minecraft and testing that it works. 

sudo apt-get -y install minecraft-pi
That will install the Minecraft personal edition and the python API library.

Open a window and type
minecraft-pi 

You should get the familiar screen for Minecraft and can build a new world. Have a drive around and when you're done press TAB to get control of the cursor. We can switch to the LXTerminal window and close down Minecraft by pressing the CTRL and C keys together. We'll come back to Minecraft later when we're ready to run the python program that is going to build our structure in the virtual world.

Getting QR encoder and testing your first QR code

We could build our own QR code maker in python, we could install a python library to generate QR codes or we could use a pre-built software package that generates that stuff for us (a simple command line program). To keep things very simple and give us an instant result we'll use a ready built QR code generator.

Open an LXTerminal and issue the following commands:

sudo apt-get install qrencode
qrencode -t ANSI "Hello World"

We've now got a QR code displaying in our LXTerminal window. You may need to stretch the window size so that the white borders at the top and bottom are visible. Get your smart phone ready, we're going to scan that QR code to prove that everything is working.

<<NOTE: to Layout insert image DSCN0163.JPG here>>

The qrencode program can generate QR codes in various flavours. You can look up these formats on Wikipedia: PNG - portable network graphics, EPS - encapsulated PostScript,SVG - scalable vector graphics, ANSI - American National Standard (& ANSI256), ASCII - American Standard Code for Information Interchange (&ASCIIi), UTF8 UCS Transformation Format - 8 bit, (& ANSIUTF8). For the python program we're going to generate an ASCII (plain text) format QR code and edit it the output with the stream editor (sed). The qrencode program generates "##" for every black square and '  ' for every white square in the QR code when we choose -t ASCII.

Open an LXTerminal and issue the following complex command:

qrencode -t ASCII "Hello Minecraft" | sed 's/  / /g' | sed 's/##/#/g' > ~/mc.qr.txt

We've now generated the data that will be the input for our python program. Take a look at it with the cat command or by using the leafpad editor.

Glueing it all together 

To get a QR code built in Minecraft we're going to use the python application programming interface (API). That lets us control our Minecraft world with a program, we can discover Steve's co-ordinates (Steve is "the Protagonist" or in other words your playable character). We can teleport Steve from one location to another. We can add or delete blocks in the world. So we've got the data built from qrencode and sed and we've got a method to read that data and build some blocks in our Minecraft world. Lets look at the python program in detail.

#!/usr/bin/python
import sys

Now we can import the API packages to connect to the Minecraft world and build blocks.

import mcpi.minecraft as mine
import mcpi.block as block

We create a connection and get the current co-ordinates where Steve is standing.

mc = mine.Minecraft.create()
pPos = mc.player.getTilePos()
print "Player point:", pPos.x, pPos.y, pPos.z

Now move Steve (teleport him) twenty blocks back, forty blocks down and twenty blocks to his left and read his new position.
 
mc.player.setTilePos(pPos.x -20, pPos.y -40, pPos.z -20)
nPos = mc.player.getTilePos()

Open the input file generated by qrencode and read every line into an array.

qrc = open('mc.qr.txt', 'r')
arrayQR = []
for line in qrc:
  arrayW.append(line)
qrc.close()

Initialise the variables we'll use to position the blocks as we generate them in the Minecraft world

print "Starting point:", nPos.x, nPos.y, nPos.z
x = nPos.x
y = nPos.y
z = nPos.z

The file generated by qrencode would come out upside down if we just worked from the first record to the last. So we need to read the last line first (to build the left hand line of blocks) and work backwards to the top (right hand line of blocks). Python has the reversed() function to read arrays from last record to first record. So each time round this "for" loop variable "i" is the line we're working on. We set the starting position for the height of the block above Steve's position to the length of each record and work down while reading the line from left to right. Trust me, that gets the QR code turned through 90 degrees but it's not back to front. QR codes have the property that you can read them up, down, left or right (those three large squares in the corners tell the reader how the code is oriented).  As we read the file if the character is a space (white square) we build a block of snow (block id = 80) in the world. If the character is a hash (black square) we build a block of obsidian (block id = 49). You can find the block id codes on the Minecraft Wiki at  http://minecraft.gamepedia.com/Data_values/Block_IDs

for i in reversed(arrayQR):
  y = pPos.y + len(i)

  for j in range(0,len(i)):
    if (i[j] == " "):
      block = 80
    if (i[j] == "#"):
      block = 49
    y = y - 1
#    print "X:", x, "Y:", y, "Z:", z, "Value:", block
    mc.setBlock(x,y,z,block)

  x = x + 1

And finally before we're done we teleport Steve back to his original position.

mc.player.setPos(pPos.x,pPos.y,pPos.z)

To get everything running we need to start Minecraft then when it's running start our python program. So that needs two LXterminal windows. In the first issue the following commands:

minecraft-pi

Login to your Minecraft world and find an area without too much terrain (we don't want trees blocking our view) use the ALT+TAB keys to switch to the second LXterminal window. In that second window issue the following commands:

cd ~/python && chmod 755 ./mc.qr.py && ./mc.qr.py 

The screen will go blank (because the last few blocks are built on top of Steve). When it's done drive round to find your QR code in the Minecraft world. I found I needed to build a tower of stone (or dirt) to get Steve positioned so that the QR code was square on and filled the top half of the screen without any keystoning effects. I was then able to scan it with my smart phone.

I'd like to thank Konrad (my 14 year old son and Minecraft expert) for his patience and advice. I started building the code with diamond (block id = 57) and obsidian. Konrad suggested using snow for better contrast. He also grabbed the screen photos and published them on http://reddit.com.
